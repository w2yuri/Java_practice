public class ScoreArray_e {
    public static void main(String[] args){
        // ①変数の宣言：「data」という名前の変数を宣言。
        // ②データ型: int[]は整数型の配列を表す。
        // 　　　つまり、dataは整数型の配列であることを示す。
        // ③配列の初期化: new int[4]という部分で、4つの整数型の要素を持つ配列を作成。
        // 　　　[4]は配列の長さを示し、この場合は4つの要素を持つことを意味。
        // 　　　配列は0から始まるインデックスを持つので、インデックスは0から3までの4つの要素が作成される。
        int [] data = new int[4];

        data[0] = 90;
        data[1] = 80;
        data[2] = 100;
        data[3] = 90;

        System.out.println("1人目は" + data[0] + "点");
        System.out.println("2人目は" + data[1] + "点");
        System.out.println("3人目は" + data[2] + "点");
        System.out.println("4人目は" + data[3] + "点");
    }
}


// 【配列の初期化の目的と必要性】
// メモリの確保: 配列を初期化することで、必要なメモリ領域が確保されます。
// プログラム実行時に必要なデータを格納するための領域を予め確保しておくことが重要です。

// 初期値の設定: 配列を初期化すると、配列の各要素に対してデフォルトの初期値が設定されます。
// 初期値は、配列要素のデータ型によって異なります。例えば、整数型の場合は0、浮動小数点型の場合は0.0、boolean型の場合はfalseなどです。

// 使用する際の便利さ: 配列を初期化することで、配列の要素に対して直接値を代入したり、取得したりすることが容易になります。
// 初期化しない場合、配列要素にアクセスする前に明示的に値を設定する必要があります。


// 【使用する場面】
// 配列の初期化は、プログラムでデータを効率的に管理し、処理するための基本的な手段です。

// データの格納: 複数のデータを効率的に格納し、操作するために使用します。
// 例えば、学生の成績、商品の価格、顧客のデータなどを配列として管理します。

// 演算処理: 多くのデータを一括して処理したり、ソートしたりする場合に配列が活用されます。
// 配列を使用することで、繰り返し処理やデータの集計が効率的に行えます。

// データの取得と設定: 複数のデータを扱う際に、配列は特に便利です。
// 初期化することで、データに簡単にアクセスでき、処理がスムーズに行えます。